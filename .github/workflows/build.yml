name: Build Goodbirds Maps (multi-city)

on:
  schedule:
    - cron: "0 16 * * *"  # 12:00 ET
    - cron: "0 1 * * *"   # 21:00 ET
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        city:
          - slug: cambridge
            title: "Cambridge, MA & Vicinity"
            center_lat: "42.378500"
            center_lon: "-71.115600"
            ring_kms: "5,10,15,20"
            default_radius_km: "20"
            maps_subdir: "cambridge"        # CHANGED: maps go in docs/maps/cambridge
            latest_href: "/maps/cambridge/latest.html"
          - slug: north-cambridge
            title: "North Cambridge, MA and Vicinity"
            center_lat: "42.400973"
            center_lon: "-71.135970"
            ring_kms: "5,10,15"
            default_radius_km: "15"
            maps_subdir: "north-cambridge"  # stays the same
            latest_href: "/maps/north-cambridge/latest.html"

    env:
      LOGO_BASENAME: goodbirds_logo_text.png
      MAP_LOGO_URL: https://goodbirds.org/goodbirds_logo_text.png

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure docs directories exist
        run: |
          mkdir -p docs/maps/${{ matrix.city.maps_subdir }}
          mkdir -p docs/${{ matrix.city.slug }}

      - name: Copy logo into docs if present at repo root
        run: |
          if [ -f "${{ env.LOGO_BASENAME }}" ]; then
            cp "${{ env.LOGO_BASENAME }}" "docs/${{ env.LOGO_BASENAME }}"
          fi

      - name: Build map for ${{ matrix.city.title }}
        env:
          EBIRD_API_KEY: ${{ secrets.EBIRD_API_KEY }}
          OUTPUT_DIR: docs/maps/${{ matrix.city.maps_subdir }}
          MAP_LOGO_FILE: ${{ github.workspace }}/docs/goodbirds_logo_text.png
          MAP_LOGO_URL: ${{ env.MAP_LOGO_URL }}
          ARCHIVE_URL: https://goodbirds.org/${{ matrix.city.slug }}/archive.html
          MAP_MAIN_TITLE: ${{ matrix.city.title }}
          CENTER_LAT: ${{ matrix.city.center_lat }}
          CENTER_LON: ${{ matrix.city.center_lon }}
          DEFAULT_RADIUS_KM: ${{ matrix.city.default_radius_km }}
          BACK_DAYS: "2"
          MAX_RESULTS: "200"
          ZOOM_START: "11"
          RING_KMS: ${{ matrix.city.ring_kms }}
        run: |
          python scripts/build_map.py

      - name: Write /${{ matrix.city.slug }}/index.html redirect to latest map
        run: |
          cat > docs/${{ matrix.city.slug }}/index.html <<'HTML'
          <!doctype html>
          <html>
            <head>
              <meta charset="utf-8">
              <meta http-equiv="refresh" content="0; url=${LATEST}">
              <title>Redirecting…</title>
            </head>
            <body>
              <p>Redirecting to the latest Goodbirds map…</p>
            </body>
          </html>
          HTML
        env:
          LATEST: ${{ matrix.city.latest_href }}

      - name: Build /${{ matrix.city.slug }}/archive.html (weekday labels)
        env:
          GIT_SHA: ${{ github.sha }}
        run: |
          python - <<'PY'
          import os, re
          from pathlib import Path
          from datetime import datetime

          slug = os.environ["CITY_SLUG"]
          maps_subdir = os.environ["MAPS_SUBDIR"]
          DOCS = Path("docs")
          MAPS = DOCS / "maps" / maps_subdir
          CITY_DIR = DOCS / slug
          DOCS.mkdir(exist_ok=True); CITY_DIR.mkdir(exist_ok=True)

          files = sorted([p for p in MAPS.glob("ebird_radius_map_*.html")], reverse=True)
          newest = files[0].name if files else "latest.html"

          by_day = {}
          for p in files:
            m = re.search(r"ebird_radius_map_(\d{4}-\d{2}-\d{2})_(\d{2}-\d{2}-\d{2})_ET_(\d+)km\.html$", p.name)
            if not m: continue
            day = m.group(1)
            time = m.group(2).replace("-", ":")
            by_day.setdefault(day, []).append((time, p.name))

          day_keys = sorted(by_day.keys(), reverse=True)[:7]
          by_day = {k: by_day[k] for k in day_keys}

          def with_weekday(dstr):
            dt = datetime.strptime(dstr, "%Y-%m-%d")
            return dt.strftime("%a, %Y-%m-%d")

          logo = "/goodbirds_logo_text.png"
          latest_link_file = f"/maps/{maps_subdir}/{newest}"
          latest_link_cachebusted = f"/maps/{maps_subdir}/latest.html?v={os.getenv('GIT_SHA','')[:8]}"

          title = os.environ["CITY_TITLE"]
          header = f"""<!doctype html>
          <html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">
          <title>Goodbirds — {title} Archive</title>
          <style>
            body {{ font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin:0; background:#fafafa; color:#222; }}
            .wrap {{ max-width: 900px; margin: 0 auto; padding: 20px 16px 40px; }}
            .crumbs {{ font-size: 14px; margin-bottom: 10px; color: #666; }}
            .header {{ display:flex; align-items:center; gap:20px; margin-bottom:16px; border-bottom:1px solid #ddd; padding-bottom:16px; }}
            .header img {{ height: 160px; }}
            .title h1 {{ font-size: 28px; margin: 0 0 6px 0; }}
            .day {{ margin-top: 24px; }}
            .day h2 {{ font-size: 20px; margin: 0 0 10px 0; }}
            ul {{ list-style:none; padding-left:0; margin:0; }}
            li {{ margin: 5px 0; }}
            a {{ text-decoration:none; color:#0a58ca; }}
            a:hover {{ text-decoration:underline; }}
          </style></head><body>
          <div class="wrap">
            <div class="crumbs"><a href="/">Home</a> / {title}</div>
            <div class="header">
              <img src="{logo}" alt="Goodbirds logo">
              <div class="title">
                <h1>{title} — Notable Maps Archive</h1>
                <div><a href="{latest_link_file}">View the latest map</a> · <a href="{latest_link_cachebusted}">via latest.html</a></div>
              </div>
            </div>
          """

          sections = []
          for day in sorted(by_day.keys(), reverse=True):
            items = []
            for time, fname in sorted(by_day[day], reverse=True):
              items.append(f'<li><a href="/maps/{maps_subdir}/{fname}">{with_weekday(day)} {time} ET</a></li>')
            sections.append(f'<div class="day"><h2>{with_weekday(day)}</h2><ul>' + "\\n".join(items) + "</ul></div>")

          footer = "</div></body></html>"
          (CITY_DIR / "archive.html").write_text(header + "\\n".join(sections) + footer, encoding="utf-8")
          print(f"Wrote docs/{slug}/archive.html")
          PY
        env:
          CITY_SLUG: ${{ matrix.city.slug }}
          CITY_TITLE: ${{ matrix.city.title }}
          MAPS_SUBDIR: ${{ matrix.city.maps_subdir }}

      - name: Commit and push city outputs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Build maps for ${{ matrix.city.title }} into docs/maps/${{ matrix.city.maps_subdir }} and update pages"
            git push
          else
            echo "No changes to commit."
          fi

  landing:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write landing page with both cities
        run: |
          python - <<'PY'
          from pathlib import Path
          cities = [
            { "title": "Cambridge, MA & Vicinity", "slug": "cambridge", "latest": "/cambridge", "archive": "/cambridge/archive.html" },
            { "title": "North Cambridge, MA and Vicinity", "slug": "north-cambridge", "latest": "/north-cambridge", "archive": "/north-cambridge/archive.html" },
          ]
          DOCS = Path("docs"); DOCS.mkdir(exist_ok=True)
          head = """<!doctype html><html lang="en"><head><meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>Goodbirds — Notable Bird Maps</title>
          <style>
            body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin:0; background:#fafafa; color:#222; }
            .wrap { max-width: 900px; margin: 0 auto; padding: 24px 16px 48px; }
            header { display:flex; align-items:center; gap:20px; border-bottom:1px solid #ddd; padding-bottom:16px; margin-bottom:16px; }
            header img { height: 160px; }
            h1 { font-size: 32px; margin: 0; }
            p { font-size: 16px; line-height: 1.45; }
            h2 { font-size: 20px; margin-top: 20px; }
            ul { list-style: none; padding-left: 0; }
            li { margin: 8px 0; }
            a { text-decoration: none; color: #0a58ca; }
            a:hover { text-decoration: underline; }
            .tech { font-size: 14px; color: #444; }
          </style></head><body>
          <div class="wrap">
            <header>
              <img src="/goodbirds_logo_text.png" alt="Goodbirds logo">
              <div>
                <h1>Goodbirds</h1>
                <p>Automated maps of eBird Notable observations near selected cities. Updated twice daily and published to the web.</p>
                <p class="tech">Built with Python, Folium, Leaflet, GitHub Actions, GitHub Pages, and the <a href="https://documenter.getpostman.com/view/664302/S1ENwy59">eBird API</a>. © contributors to OpenStreetMap and tile providers.</p>
              </div>
            </header>
            <section><h2>Cities</h2><ul>"""
          items = [f'<li><a href="{c["latest"]}">{c["title"]}</a> — <a href="{c["archive"]}">archive</a></li>' for c in cities]
          tail = "</ul></section></div></body></html>"
          (DOCS / "index.html").write_text(head + "\n".join(items) + tail, encoding="utf-8")
          print("Wrote docs/index.html")
          PY

      - name: Commit and push landing page
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/index.html
          if ! git diff --cached --quiet; then
            git commit -m "Update landing page"
            git push
          else
            echo "No changes to commit."
          fi
